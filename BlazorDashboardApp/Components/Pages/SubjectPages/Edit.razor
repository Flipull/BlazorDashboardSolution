@page "/subject/edit"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Editor")]

@inject NavigationManager NavigationManager

@using BlazorDashboardApp.Services
@inject SubjectService SubjectService
@using BlazorDashboardApp.Data
@using BlazorDashboardApp.ViewModels


<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Subject</h2>
<hr />
@if (Subject is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Subject" OnValidSubmit="UpdateSubject" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Subject.Id" value="@Subject.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Subject.Name" class="form-control" />
                    <ValidationMessage For="() => Subject.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Subject.Description" class="form-control" />
                    <ValidationMessage For="() => Subject.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="photofile" class="form-label">Photofile:</label>
                    <InputText id="photofile" @bind-Value="Subject.Photofile" class="form-control" />
                    <ValidationMessage For="() => Subject.Photofile" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/subject">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private SubjectViewModel Subject { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Subject = await SubjectService.Get(Id);

        //if (Subject is null)
        //    NavigationManager.NavigateTo("notfound");
    }

    private async Task UpdateSubject()
    {
        Subject = await SubjectService.Update(Subject);
    }
}
